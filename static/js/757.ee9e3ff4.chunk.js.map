{"version":3,"file":"static/js/757.ee9e3ff4.chunk.js","mappings":"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","sources":["store/reducers/event/thunk-creators.ts","store/reducers/event/selectors.ts","components/EventCalendar.tsx","utils/validationRules.ts","components/CreateEventForm.tsx","components/modals/CreateEventModal.tsx","components/EventCalendarMobile.tsx","components/modals/EventsInfoModal.tsx","pages/EventPage.tsx"],"sourcesContent":["import { EventActions } from '.';\r\nimport { IEvent } from '../../../models';\r\nimport UsersService from '../../../services/usersService';\r\nimport { AppDispatch, RootState } from './../../index';\r\n\r\nexport const fetchGuests = () => async (dispatch: AppDispatch, getState: () => RootState) => {\r\n   try {\r\n      const data = await UsersService.fetchUsers();\r\n      const authUser = getState().auth.user;\r\n      const guests = data.filter(u => u.id !== authUser?.id);\r\n      dispatch(EventActions.fetchUsersSuccess(guests));\r\n   } catch (e: any) {\r\n      alert((e.message));\r\n   }\r\n}\r\n\r\nexport const fetchEvents = () => async (dispatch: AppDispatch, getState: () => RootState) => {\r\n   try {\r\n      const data = JSON.parse(localStorage.getItem('events') || '[]') as IEvent[];\r\n      const authUser = getState().auth.user;\r\n      const events = data.filter(ev => ev.authorId === authUser!.id || ev.guestsId.includes(authUser!.id));\r\n      dispatch(EventActions.fetchEventsSuccess(events));\r\n   } catch (e: any) {\r\n      alert((e.message));\r\n      dispatch(EventActions.fetchEventsSuccess([]));\r\n   }\r\n}\r\n\r\nexport const createEvent = (event: IEvent) => async (dispatch: AppDispatch) => {\r\n   try {\r\n      const data = JSON.parse(localStorage.getItem('events') || '[]') as IEvent[];\r\n      data.push(event);\r\n      localStorage.setItem('events', JSON.stringify(data));\r\n      dispatch(EventActions.createEventSuccess(event));\r\n   } catch (e: any) {\r\n      alert(e.message);\r\n   }\r\n}\r\n\r\nexport const removeEvent = (id: string) => async (dispatch: AppDispatch) => {\r\n   try {\r\n      const data = JSON.parse(localStorage.getItem('events')!) as IEvent[];\r\n      const updatedEvents = data.filter(ev => ev.id !== id);\r\n      localStorage.setItem('events', JSON.stringify(updatedEvents));\r\n      dispatch(EventActions.removeEventSuccess(id));\r\n   } catch (e: any) {\r\n      alert(e.message);\r\n   }\r\n}","import { RootState } from './../../index';\r\n\r\nexport const event_selectGuests = (state: RootState) => state.event.guests;\r\nexport const event_selectEvents = (state: RootState) => state.event.events;\r\nexport const event_selectError = (state: RootState) => state.event.error;","import { FC } from 'react';\r\nimport { Calendar } from 'antd';\r\nimport { DeleteOutlined } from '@ant-design/icons';\r\nimport { Dayjs } from 'dayjs';\r\nimport 'dayjs/locale/en-gb';\r\nimport locale from 'antd/es/date-picker/locale/en_GB';\r\nimport { IEvent, IUser } from '../models';\r\n\r\ninterface Props {\r\n   authUser: IUser;\r\n   events: IEvent[];\r\n   onRemoveEvent: (id: string) => void;\r\n}\r\n\r\nconst EventCalendar: FC<Props> = ({ authUser, events, onRemoveEvent }) => {\r\n   const handleRemoveEvent = (id: string) => {\r\n      onRemoveEvent(id);\r\n   }\r\n\r\n   const dateCellRender = (value: Dayjs) => {\r\n      const formattedDate = value.format('YYYY-DD-MM');\r\n      const currentDayEvents = events.filter(ev => ev.date === formattedDate);\r\n\r\n      return (\r\n         <ul className=\"eventsList\">\r\n            {currentDayEvents.map(ev => {\r\n               const isEventCreator = authUser.id === ev.authorId;\r\n\r\n               return (\r\n                  <li key={ev.id} className=\"eventsListItem\">\r\n                     <span className=\"eventsListText\">{ev.description}</span>\r\n                     {isEventCreator && (\r\n                        <DeleteOutlined\r\n                           className=\"eventsListDeleteBtn\"\r\n                           onClick={() => handleRemoveEvent(ev.id)} />\r\n                     )}\r\n                  </li>\r\n               )\r\n            })}\r\n         </ul>\r\n      );\r\n   };\r\n\r\n   return (\r\n      <Calendar\r\n         className=\"eventPageCalendar\"\r\n         locale={locale}\r\n         dateCellRender={dateCellRender} />\r\n   );\r\n};\r\n\r\nexport default EventCalendar;","class Rules {\r\n   static required = (message = 'This field is required!') => {\r\n      return {\r\n         required: true,\r\n         message\r\n      }\r\n   }\r\n}\r\n\r\nexport default Rules;","import React, { FC, useState } from 'react';\r\nimport { Button, DatePicker, Form, Input, Select, Space } from 'antd';\r\nimport { useForm } from 'antd/es/form/Form';\r\nimport dayjs, { Dayjs } from 'dayjs';\r\nimport 'dayjs/locale/en-gb';\r\nimport locale from 'antd/es/date-picker/locale/en_GB';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport Rules from '../utils/validationRules';\r\nimport { IEvent, IUser } from '../models';\r\n\r\ninterface Props {\r\n   authUser: IUser | null;\r\n   guests: IUser[] | null;\r\n   closeModal: () => void;\r\n   onSubmit: (event: IEvent) => Promise<void>;\r\n}\r\n\r\ninterface EventFormValues {\r\n   date: Dayjs;\r\n   description: string;\r\n   selectedGuests: string[];\r\n}\r\n\r\nconst CreateEventForm: FC<Props> = React.memo(({ authUser, guests, closeModal, onSubmit }) => {\r\n   const [form] = useForm();\r\n   const [loading, setLoading] = useState(false);\r\n\r\n   const handleSubmit = async ({ date, description, selectedGuests }: EventFormValues) => {\r\n      setLoading(true);\r\n      console.log(date, description, selectedGuests);\r\n\r\n\r\n      const event = {\r\n         id: uuidv4(),\r\n         authorId: `${authUser?.id}` || '0',\r\n         date: date.format('YYYY-DD-MM'),\r\n         description,\r\n         guestsId: selectedGuests\r\n      };\r\n\r\n      setTimeout(async () => {\r\n         await onSubmit(event);\r\n         form.resetFields();\r\n         setLoading(false);\r\n      }, 1000);\r\n   }\r\n\r\n   return (\r\n      <Form\r\n         className=\"createEventForm\"\r\n         name=\"eventForm\"\r\n         form={form}\r\n         autoComplete=\"off\"\r\n         onFinish={handleSubmit}\r\n         initialValues={{\r\n            date: dayjs()\r\n         }}\r\n      >\r\n         <h3 className=\"createEventFormHeader\">Create event</h3>\r\n         <Form.Item\r\n            label=\"Select event date\"\r\n            name=\"date\"\r\n            rules={[Rules.required('Date is required!')]}\r\n         >\r\n            <DatePicker locale={locale} className=\"createEventDatePicker\" />\r\n         </Form.Item>\r\n         <Form.Item\r\n            label=\"Add event description\"\r\n            name=\"description\"\r\n            rules={[Rules.required()]}\r\n         >\r\n            <Input placeholder=\"Type your description here...\" />\r\n         </Form.Item>\r\n         <Form.Item\r\n            label=\"Select guest\"\r\n            name=\"selectedGuests\"\r\n         >\r\n            <Select mode=\"multiple\" loading={!guests} showArrow showSearch={false}>\r\n               {guests?.map(g => (\r\n                  <Select.Option key={g.id} value={g.id}>{g.email}</Select.Option>\r\n               ))}\r\n            </Select>\r\n         </Form.Item>\r\n         <Space className=\"createEventFormFooter\">\r\n            <Button size=\"large\" onClick={closeModal}>Cancel</Button>\r\n            <Button\r\n               className=\"createEventFormBtn\"\r\n               type=\"primary\"\r\n               htmlType=\"submit\"\r\n               size=\"large\"\r\n               loading={loading}\r\n            >\r\n               Create\r\n            </Button>\r\n         </Space>\r\n      </Form>\r\n   );\r\n});\r\n\r\nexport default CreateEventForm;","import React, { FC, useEffect } from 'react';\r\nimport { Modal } from 'antd';\r\nimport CreateEventForm from '../CreateEventForm';\r\nimport { useAppDispatch, useAppSelector } from '../../hooks/redux';\r\nimport { event_selectGuests } from '../../store/reducers/event/selectors';\r\nimport { fetchGuests } from '../../store/reducers/event/thunk-creators';\r\nimport { IEvent } from '../../models';\r\nimport { auth_selectUser } from '../../store/reducers/auth/selectors';\r\n\r\ninterface Props {\r\n   isModalOpen: boolean;\r\n   closeModal: () => void;\r\n   onSubmit: (event: IEvent) => Promise<void>;\r\n}\r\n\r\nconst CreateEventModal: FC<Props> = React.memo(({ isModalOpen, closeModal, onSubmit }) => {\r\n   const authUser = useAppSelector(auth_selectUser);\r\n   const guests = useAppSelector(event_selectGuests);\r\n\r\n   const dispatch = useAppDispatch();\r\n\r\n   useEffect(() => {\r\n      setTimeout(() => dispatch(fetchGuests()), 1500);\r\n   }, []);\r\n\r\n   return (\r\n      <Modal\r\n         open={isModalOpen}\r\n         centered\r\n         closable={false}\r\n         footer={null}\r\n      >\r\n         <CreateEventForm\r\n            authUser={authUser}\r\n            guests={guests}\r\n            closeModal={closeModal}\r\n            onSubmit={onSubmit} />\r\n      </Modal>\r\n   );\r\n});\r\n\r\nexport default CreateEventModal; ","import { FC } from 'react';\r\nimport { Calendar } from 'antd';\r\nimport { ExclamationCircleOutlined } from '@ant-design/icons';\r\nimport { Dayjs } from 'dayjs';\r\nimport 'dayjs/locale/en-gb';\r\nimport locale from 'antd/es/date-picker/locale/en_GB';\r\nimport { IEvent } from '../models';\r\n\r\ninterface Props {\r\n   events: IEvent[];\r\n   onSelect: (date: string) => void;\r\n}\r\n\r\nconst EventCalendarMobile: FC<Props> = ({ events, onSelect }) => {\r\n   const dateCellRender = (value: Dayjs) => {\r\n      const formattedDate = value.format('YYYY-DD-MM');\r\n      const currentDayEvents = events.filter(ev => ev.date === formattedDate);\r\n\r\n      return (\r\n         currentDayEvents.length > 0 ?\r\n            <div className=\"eventCalendarMobileNotification\">\r\n               <ExclamationCircleOutlined className=\"eventCalendartMobileIcon\" />\r\n               <p className=\"eventCalendartMobileText\">Info!</p>\r\n            </div>\r\n            :\r\n            <></>\r\n\r\n      );\r\n   };\r\n\r\n   const handleSelect = (date: Dayjs) => {\r\n      const formattedDate = date.format('YYYY-DD-MM');\r\n      onSelect(formattedDate);\r\n   }\r\n\r\n   return (\r\n      <Calendar\r\n         className=\"eventCalendarMobile\"\r\n         locale={locale}\r\n         dateCellRender={dateCellRender}\r\n         onSelect={handleSelect} />\r\n   );\r\n}\r\n\r\nexport default EventCalendarMobile;","import React, { FC } from 'react';\r\nimport { Button, Modal } from 'antd';\r\nimport { IEvent, IUser } from '../../models';\r\nimport { DeleteOutlined } from '@ant-design/icons';\r\n\r\ninterface Props {\r\n   authUser: IUser;\r\n   selectedDateEvents: IEvent[];\r\n   isModalOpen: boolean;\r\n   closeModal: () => void;\r\n   onRemoveEvent: (id: string) => void;\r\n}\r\n\r\nconst EventsInfoModal: FC<Props> = ({ authUser, selectedDateEvents, isModalOpen, closeModal, onRemoveEvent }) => {\r\n   const handleCancel = () => {\r\n      closeModal();\r\n   }\r\n\r\n   const handleRemoveEvent = (id: string) => {\r\n      onRemoveEvent(id);\r\n   }\r\n\r\n   return (\r\n      <Modal\r\n         className=\"eventsInfoModal\"\r\n         open={isModalOpen}\r\n         centered\r\n         closable={false}\r\n         footer={null}\r\n         onCancel={handleCancel}\r\n      >\r\n         <h4 className=\"eventsInfoModalHeader\">Events that you have on this day:</h4>\r\n         {selectedDateEvents.length > 0 ?\r\n            <ul className=\"eventsList\">\r\n               {selectedDateEvents.map(ev => {\r\n                  const isEventCreator = authUser.id === ev.authorId;\r\n\r\n                  return (\r\n                     <li key={ev.id} className=\"eventsListItem\">\r\n                        <span className=\"eventsListText\">{ev.description}</span>\r\n                        {isEventCreator && (\r\n                           <DeleteOutlined\r\n                              className=\"eventsListDeleteBtn\"\r\n                              onClick={() => handleRemoveEvent(ev.id)} />\r\n                        )}\r\n                     </li>\r\n                  )\r\n               })}\r\n            </ul>\r\n            :\r\n            <div className=\"eventsInfoText\">You are not having any events on this day...</div>\r\n         }\r\n         <Button className=\"eventsInfoModalBtn\" onClick={handleCancel}>\r\n            Cancel\r\n         </Button>\r\n      </Modal>\r\n   );\r\n}\r\n\r\nexport default EventsInfoModal;","import { useCallback, useEffect, useState } from 'react';\r\nimport { Button, Layout } from 'antd';\r\nimport { IEvent } from '../models';\r\nimport { useAppDispatch, useAppSelector } from '../hooks/redux';\r\nimport { createEvent, fetchEvents, removeEvent } from '../store/reducers/event/thunk-creators';\r\nimport { auth_selectUser } from '../store/reducers/auth/selectors';\r\nimport { event_selectEvents } from '../store/reducers/event/selectors';\r\nimport Preloader from '../components/Preloader';\r\nimport EventCalendar from '../components/EventCalendar';\r\nimport CreateEventModal from '../components/modals/CreateEventModal';\r\nimport EventCalendarMobile from '../components/EventCalendarMobile';\r\nimport EventsInfoModal from '../components/modals/EventsInfoModal';\r\n\r\nconst EventPage = () => {\r\n   const authUser = useAppSelector(auth_selectUser);\r\n   const events = useAppSelector(event_selectEvents);\r\n\r\n   const [isCreateEventModalOpen, setIsCreateEventModalOpen] = useState(false);\r\n   const [isEventsInfoModalOpen, setIsEventsInfoModalOpen] = useState(false);\r\n   const [isFetchingEvents, setIsFetchingEvents] = useState(true);\r\n   const [selectedDateEvents, setSelectedDateEvents] = useState<IEvent[]>([]);\r\n\r\n   const dispatch = useAppDispatch();\r\n\r\n   useEffect(() => {\r\n      setTimeout(async () => {\r\n         await dispatch(fetchEvents())\r\n         setIsFetchingEvents(false);\r\n      }, 1000);\r\n   }, []);\r\n\r\n   const showCreateEventModal = () => {\r\n      setIsCreateEventModalOpen(true);\r\n   };\r\n\r\n   const closeCreateEventModal = useCallback(() => {\r\n      setIsCreateEventModalOpen(false);\r\n   }, []);\r\n\r\n   const showEventsInfoModal = () => {\r\n      setIsEventsInfoModalOpen(true);\r\n   };\r\n\r\n   const closeEventsInfoModal = useCallback(() => {\r\n      setIsEventsInfoModalOpen(false);\r\n   }, []);\r\n\r\n   const handleRemoveEvent = useCallback((id: string) => {\r\n      dispatch(removeEvent(id));\r\n      setSelectedDateEvents(selectedDateEvents.filter(ev => ev.id !== id));\r\n   }, []);\r\n\r\n   const handleDateSelect = useCallback((date: string) => {\r\n      const currentDateEvents = events!.filter(ev => ev.date === date);\r\n      setSelectedDateEvents(currentDateEvents);\r\n      showEventsInfoModal();\r\n   }, [events]);\r\n\r\n   const handleSubmit = useCallback(async (event: IEvent) => {\r\n      await dispatch(createEvent(event));\r\n      setIsCreateEventModalOpen(false);\r\n   }, []);\r\n\r\n   return (\r\n      <Layout className=\"eventPage\">\r\n         <Button\r\n            className=\"eventPageBtn\"\r\n            type=\"primary\"\r\n            size=\"large\"\r\n            loading={isFetchingEvents}\r\n            disabled={isFetchingEvents}\r\n            onClick={showCreateEventModal}\r\n         >\r\n            Create event\r\n         </Button>\r\n         {isFetchingEvents\r\n            ? <Preloader />\r\n            : <>\r\n               <EventCalendar\r\n                  authUser={authUser!}\r\n                  events={events!}\r\n                  onRemoveEvent={handleRemoveEvent} />\r\n               <EventCalendarMobile\r\n                  events={events!}\r\n                  onSelect={handleDateSelect} />\r\n            </>\r\n         }\r\n         <CreateEventModal\r\n            isModalOpen={isCreateEventModalOpen}\r\n            closeModal={closeCreateEventModal}\r\n            onSubmit={handleSubmit} />\r\n         <EventsInfoModal\r\n            authUser={authUser!}\r\n            selectedDateEvents={selectedDateEvents}\r\n            isModalOpen={isEventsInfoModalOpen}\r\n            closeModal={closeEventsInfoModal}\r\n            onRemoveEvent={handleRemoveEvent} />\r\n      </Layout>\r\n   );\r\n}\r\n\r\nexport default EventPage;"],"names":["createEvent","event","dispatch","data","JSON","parse","localStorage","getItem","push","setItem","stringify","EventActions","e","alert","message","event_selectGuests","state","guests","event_selectEvents","events","authUser","onRemoveEvent","className","locale","dateCellRender","value","formattedDate","format","currentDayEvents","filter","ev","date","map","isEventCreator","id","authorId","description","DeleteOutlined","onClick","Rules","required","CreateEventForm","React","closeModal","onSubmit","useForm","form","useState","loading","setLoading","handleSubmit","selectedGuests","console","log","uuidv4","guestsId","setTimeout","resetFields","name","autoComplete","onFinish","initialValues","dayjs","label","rules","placeholder","mode","showArrow","showSearch","g","email","size","type","htmlType","CreateEventModal","isModalOpen","useAppSelector","auth_selectUser","useAppDispatch","useEffect","getState","UsersService","auth","user","u","open","centered","closable","footer","onSelect","length","ExclamationCircleOutlined","selectedDateEvents","handleCancel","onCancel","isCreateEventModalOpen","setIsCreateEventModalOpen","isEventsInfoModalOpen","setIsEventsInfoModalOpen","isFetchingEvents","setIsFetchingEvents","setSelectedDateEvents","includes","closeCreateEventModal","useCallback","closeEventsInfoModal","handleRemoveEvent","updatedEvents","removeEvent","handleDateSelect","currentDateEvents","disabled","Preloader"],"sourceRoot":""}